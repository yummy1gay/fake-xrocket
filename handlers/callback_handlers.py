from telethon import events, types, Button

from datetime import datetime
import os

from utils.data_management import create_new_user, load_user_data, save_user_data
from utils.external_services import get_ton_usd_price, generate_cheque_id, send_newsletter

from handlers.message_handlers import showkok

from bot import client, start_time
from config import *

@client.on(events.CallbackQuery(data=b'Wallet'))
@client.on(events.CallbackQuery(data=b'wallet_message'))
async def wallet(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
    balance_ton = f'{user_data["balance_ton"]:f}'.rstrip('0').rstrip('.')
    balance_usdt = f'{user_data["balance_usdt"]:f}'.rstrip('0').rstrip('.')
    total_balance = balance_ton_price_in_usd + float(balance_usdt)

    text = (f'üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n'
            f'<a href="https://ton.org/"><b>TON</b></a>: {balance_ton} TON ({balance_ton_price_in_usd:.2f}$)\n\n'
            f'<a href="https://tether.to/"><b>USDT</b></a>: {balance_usdt} USDT ({balance_usdt}$)\n\n'
            f'<b>‚âà {total_balance:.2f}$</b>')
    buttons = [
        [
            Button.inline('üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', b'Deposit'),
            Button.inline('üì§ –í—ã–≤–æ–¥', b'Withdraw'),
        ],
        [
            types.KeyboardButtonSwitchInline(
                'üè∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏', 
                f'')
        ],
        [
            Button.inline('üñº NFT', b'NFT'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
        ],
    ]
    if event.data == b'Wallet':
        await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    elif event.data == b'wallet_message':
        await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Deposit'))
async def deposit(event):
    text = (f"üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>")

    buttons=[
                [
                    Button.inline('TON', b'Deposit_TON'),
                    Button.inline('USDT', b'Deposit_USDT'),
                ],
                [
                    Button.inline('TON –¢–æ–∫–µ–Ω—ã', b'CoinsList_TOKENS-1'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Wallet'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Withdraw'))
async def withdraw(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
    balance_ton = f'{user_data["balance_ton"]:f}'.rstrip('0').rstrip('.')
    balance_usdt = f'{user_data["balance_usdt"]:f}'.rstrip('0').rstrip('.')

    text = (f"üì• <b>–í—ã–≤–æ–¥</b>\n\n<b>TON</b>: {balance_ton} TON ({balance_ton_price_in_usd:.2f}$)\n"
            f"<b>USDT</b>: {balance_usdt} USDT ({balance_usdt}$)\n\n"
            f"<a href='https://t.me/xrocket?start=fees_wallet-w'><i>–õ–∏–º–∏—Ç—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏</i></a>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:</b>")

    buttons=[
                [
                    Button.inline('TON', b'Withdraw_TON'),
                    Button.inline('USDT', b'Withdraw_USDT'),
                ],
                [
                    Button.inline('TON –¢–æ–∫–µ–Ω—ã', b'CoinsList_TOKENS-1'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Wallet'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Back'))
async def back(event):
    user_id = event.sender_id
    user = await client.get_entity(user_id)
    first_name = user.first_name
    last_name = user.last_name
    username = user.username

    user_data = load_user_data(user_id)
    if not user_data:
        user_data = create_new_user(user_id, first_name, last_name, username)

    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
    balance_usdt = user_data["balance_usdt"]
    total_balance = balance_ton_price_in_usd + balance_usdt
    cheque_count = len([cheque for cheque in user_data["cheques"] if cheque["status"] == "created"])

    text = (f'üöÄ <b>xRocket</b> ‚Äî —ç—Ç–æ –±–æ—Ç-–∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–∫—É–ø–∫–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ Telegram.\n\n'
            f'–û –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —á–∏—Ç–∞–π—Ç–µ –≤ <a href="https://t.me/xrocketnewsru">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ</a>')

    buttons = [
        [
            Button.inline(f'üíµ –ú–æ–π –∫–æ—à–µ–ª–µ–∫ ({total_balance:.2f}$)', b'Wallet'),
        ],
        [
            types.KeyboardButtonWebView(
                "üí± Web-–±–∏—Ä–∂–∞",
                "https://web.ton-rocket.com/",
        )
        ],
        [
            Button.inline(f'üè∑ –ß–µ–∫–∏' + (f' ¬∑ {cheque_count}' if cheque_count > 0 else ''), b'Cheques'),
            Button.inline('üó≥ P2P –ú–∞—Ä–∫–µ—Ç', b'P2P'),
        ],
        [
            Button.inline('üí± –ë–∏—Ä–∂–∞', b'ExchangeV2'),
            Button.inline('üìã –°—á–µ—Ç–∞', b'Invoices'),
        ],
        [
            Button.inline('üíº –°–¥–µ–ª–∫–∏', b'Swaps'),
            Button.inline('üåü –ü–æ–¥–ø–∏—Å–∫–∏', b'Subscriptions'),
        ],
        [
            Button.inline('ü§ñ Rocket Pay', b'RocketPay'),
            Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', b'Settings'),
        ],
    ]
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'P2P'))
async def p2p(event):
    text = (f'üó≥ <b>–ú–∞—Ä–∫–µ—Ç</b>\n\n'
            f'–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ</b>, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–∞—è—Å—å –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'
            f'–ë–æ—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç <b>–≥–∞—Ä–∞–Ω—Ç–æ–º –≤ —Å–¥–µ–ª–∫–µ</b>, <b>–±–ª–æ–∫–∏—Ä—É—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</b> –≤–æ –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.\n\n'
            f'–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞ –º–∞—Ä–∫–µ—Ç–∞ - <b>UAH</b>, –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞—Ä–∫–µ—Ç–∞</b>.\n\n'
            f'–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É - <b>0%</b>, –Ω–∞ –ø—Ä–æ–¥–∞–∂—É - <b>1%</b>\n\n'
            f'–ï—Å–ª–∏ –í—ã –Ω–∞—à–ª–∏ <b>–æ—à–∏–±–∫—É</b> –∏–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ <b>—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç –∏–ª–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã</b>, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ <a href="https://t.me/{support_bot_username}"><b>—Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É</b></a>.')

    buttons=[
                [
                    Button.inline('–ö—É–ø–∏—Ç—å', b'Buy'),
                    Button.inline('–ü—Ä–æ–¥–∞—Ç—å', b'Sell'),
                ],
                [
                    Button.inline('‚ùáÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', b'Create'),
                ],
                [
                    Button.inline('–ú–æ–∏ —Å–¥–µ–ª–∫–∏', b'ActiveUserDeals'),
                ],
                [
                    Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ç–∞', b'P2P_Settings'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'ExchangeV2'))
async def exchangev2(event):
    text = (f"üí± <b>–ë–∏—Ä–∂–∞</b>\n\n"
            f"–¢–æ—Ä–≥—É–π—Ç–µ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω–æ–π –±–∏—Ä–∂–µ.\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>0.1%</b> –¥–ª—è –º–µ–π–∫–µ—Ä–æ–≤ –∏ <b>0.15%</b> –¥–ª—è —Ç–µ–π–∫–µ—Ä–æ–≤ <b>—Å –ø–æ–ª—É—á–∞–µ–º–æ–π</b> —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞.")

    buttons=[
                [
                    types.KeyboardButtonWebView(
                        "üí± Web-–±–∏—Ä–∂–∞",
                        "https://web.ton-rocket.com/",
                )
                ],
                [
                    Button.inline('–ë–æ—Ç-–±–∏—Ä–∂–∞', b'BotExchange'),
                ],
                [
                    Button.inline('üèÜ –†–µ–π—Ç–∏–Ω–≥', b'Rank'),
                    Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', b'Settings_Exchange'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Invoices'))
async def invoices(event):
    text = (f"üìã <b>–°—á–µ—Ç–∞</b>\n\n"
            f"<b>–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:</b>\n"
            f"¬∑ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π - <i>—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑</i>\n"
            f"¬∑ –º—É–ª—å—Ç–∏-—Å—á—ë—Ç - <i>—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–≥—É—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑</i>\n\n"
            f"–û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å—á–µ—Ç–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ <b>xRocket</b>, –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ <b>–±–ª–æ–∫—á–µ–π–Ω-–∞–¥—Ä–µ—Å—É</b>.")

    buttons=[
                [
                    Button.inline('–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π', b'Single'),
                    Button.inline('–ú—É–ª—å—Ç–∏-—Å—á—ë—Ç', b'Multi'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Swaps'))
async def swaps(event):
    text = (f"üíº <b>–°–¥–µ–ª–∫–∏</b>\n\n"
            f"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å <b>—Å–¥–µ–ª–∫—É</b> –ø–æ –æ–±–º–µ–Ω—É –ª—é–±–æ–π –≤–∞–ª—é—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ –±–æ—Ç–µ, —Å <b>–¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>, –Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏, —Å–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É —Å –Ω—É–∂–Ω—ã–º–∏ –≤–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>, <b>—Å –∫–æ—Ç–æ—Ä—ã–º</b> —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω.\n\n"
            f"–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –≤—ã—Å—Ç—É–ø–∏—Ç –≤ —Ä–æ–ª–∏ –≥–∞—Ä–∞–Ω—Ç–∞ —Å–¥–µ–ª–∫–∏, –∏ –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

    buttons=[
                [
                    Button.inline('–°–æ–∑–¥–∞—Ç—å', b'Create_Swap'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Subscriptions'))
async def subscriptions(event):
    text = (f"üåü <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.\n\n"
            f"<b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> <i>- –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏</i>\n"
            f"<b>–°–æ–∑–¥–∞–Ω–Ω—ã–µ</b> <i>- —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –í–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏</i>")

    buttons=[
                [
                    Button.inline('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', b'My'),
                    Button.inline('–°–æ–∑–¥–∞–Ω–Ω—ã–µ', b'Created'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'RocketPay'))
async def rocketpay(event):
    text = (f"ü§ñ <b>Rocket Pay</b>\n\n"
            f"–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–µ <b>API Rocket Pay</b> üöÄ –≤ —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å.\n\n"
            f"<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫–∏, —Å—á–µ—Ç–∞ –∏ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ API.</b>\n\n"
            f"<i>–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>1.5%</b>  (–¥–ª—è —Å—á–µ—Ç–æ–≤ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π), –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ <b>–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.</b></i>")

    buttons=[
                [
                    Button.inline('–°–æ–∑–¥–∞—Ç—å', b'Create'),
                ],
                [
                    Button.url('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Rocket Api', 'https://pay.ton-rocket.com/api/'),
                ],
                [
                    Button.url('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Exchange Api', 'https://trade.ton-rocket.com/api'),
                ],
                [
                    Button.inline('–ß–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ê–ü–ò', b'DevChat'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Settings'))
async def settings(event):
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–í–∞—à —è–∑—ã–∫: <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b>\n"
            f"–í–∞–ª—é—Ç–∞ –±–æ—Ç–∞: <b>USD ¬∑ $</b>")

    buttons=[
                [
                    Button.url('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', f'https://t.me/{support_bot_username}'),
                ],
                [
                    Button.inline('üí≤ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤', b'HideBalances'),
                ],
                [
                    Button.inline('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏', b'HideCoins'),
                ],
                [
                    Button.inline('–Ø–∑—ã–∫ –±–æ—Ç–∞', b'Language'),
                    Button.inline('–í–∞–ª—é—Ç–∞ –±–æ—Ç–∞', b'BotCurrency'),
                ],
                [
                    Button.inline('üìÑ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π', b'History'),
                ],
                [
                    Button.inline('üîå –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫', b'LinkWallet'),
                ],
                [
                    Button.inline('üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', b'GroupsManagement'),
                ],
                [
                    Button.inline('üí• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', b'RefSystem'),
                ],
                [
                    Button.inline('‚òÑÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞', b'Listing'),
                ],
                [
                    Button.inline('üåÖ –õ–∏–º–∏—Ç—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏', b'LimitsFees'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'NFT'))
async def nft(event):
    text = (f"üñº <b>NFT</b>\n\n"
            f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ NFT.\n"
            f"<b>–í–ª–∞–¥–µ–Ω–∏–µ NFT</b> –¥–∞—ë—Ç –í–∞–º <b>—Å–∫–∏–¥–∫–∏</b> –∏ <b>–±–æ–Ω—É—Å—ã</b> –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –Ω–∞–º–∏ —É—Å–ª—É–≥–∏.\n"
            f"–ö–∞–∂–¥–æ–µ NFT –¥–∞—ë—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–æ, —á—Ç–æ <b>–±–æ–Ω—É—Å—ã –∏ —Å–∫–∏–¥–∫–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ NFT —Å—É–º–º–∏—Ä—É—é—Ç—Å—è</b>, —á—Ç–æ –¥–∞—ë—Ç –í–∞–º –µ—â—ë –±–æ–ª—å—à—É—é –≤—ã–≥–æ–¥—É.\n\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>10%</b>\n"
            f"–°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏: <b>0%</b>\n"
            f"–í–µ—Å: <b>0</b>")

    buttons=[
                [
                    Button.url('–ö—É–ø–∏—Ç—å NFT', 'https://t.me/ton_rocket_presale_bot'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Wallet'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'LinkWallet'))
async def linkwallet(event):
    text = (f"üîå <b>–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫</b>\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ <b>–ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–∏ TON –∫–æ—à–µ–ª—ë–∫</b> –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –º–æ–Ω–µ—Ç —Å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫.")

    buttons=[
                [
                    Button.url('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫', 'https://t.me/xrocket/cex?startapp=connect-wallet-ton'),
                ],
                [
                    Button.inline('–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏', b'Active'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Listing'))
async def Listing(event):
    text = (f"‚òÑÔ∏è <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
            f"–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ <b>–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥ –í–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ –æ—Ç –Ω–∞—Å –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–∞–∫–∂–µ <b>–∏–º–µ—Ç—å –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –≤ –±–æ—Ç–µ</b> —Å—É–º–º—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –æ–ø–ª–∞—Ç—ã –ª–∏—Å—Ç–∏–Ω–≥–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ –≤ <b>46297 XROCK (4 000.1$)</b> (20% —Å–∫–∏–¥–∫–∞) –∏–ª–∏ <b>5000 USDT</b>.\n\n"
            f"–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ, –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥ <b>–±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –í–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å</b>.\n\n"
            f"üéà –¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ <b>–≤ —Å–ª—É—á–∞–µ –ª–∏—Å—Ç–∏–Ω–≥–∞</b> –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è <b>–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É</b> –≤ —Ç–æ–∫–µ–Ω–∞—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞, —Ç.–µ. <b>–æ–ø–ª–∞—Ç–∏—Ç—å —Å—É–º–º—É 5000 USD –≤ —Ç–æ–∫–µ–Ω–∞—Ö</b>.\n\n"
            f"<b>–ù–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            f"¬∑ –ø—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å <b>–±–æ–ª–µ–µ 1 –º–µ—Å—è—Ü–∞</b>\n"
            f"¬∑ –æ–±–ª–∞–¥–∞—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π, —Ç–æ–∫–µ–Ω–æ–º–∏–∫–æ–π –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º\n\n"
            f"–í—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ <a href='https://telegra.ph/xrocket---usloviya-listinga-10-26'><b>—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</b></a>")

    buttons=[
                [
                    Button.inline('üí° –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ', b'Info'),
                ],
                [
                    Button.inline('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', b'Create'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'History'))
async def history(event):
    text = (f"üìÑ <b>–ò—Å—Ç–æ—Ä–∏—è</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏—Å—Ç–æ—Ä–∏–∏ –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.")

    buttons=[
                [
                    Button.inline('üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è', b'Deposit'),
                    Button.inline('üì§ –í—ã–≤–æ–¥—ã', b'Withdraw'),
                ],
                [
                    Button.inline('üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã', b'Transfer'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Language'))
async def language(event):
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–í–∞—à —è–∑—ã–∫: <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>")

    buttons=[
                [
                    Button.inline('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', b'Change_EN'),
                    Button.inline('¬∑ –†—É—Å—Å–∫–∏–π ¬∑', b'Change_RU'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'BotCurrency'))
async def botcurrency(event):
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: <b>USD ¬∑ $</b>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–∞–ª–∞–Ω—Å:</b>")

    buttons=[
                [
                    Button.inline('¬∑ USD $ ¬∑', b'Currency_1'),
                    Button.inline('RUB ‚ÇΩ', b'Currency_2'),
                    Button.inline('EUR ‚Ç¨', b'Currency_3'),
                    Button.inline('BYN Br', b'Currency_4'),
                ],
                [
                    Button.inline('UAH ‚Ç¥', b'Currency_5'),
                    Button.inline('GBP ¬£', b'Currency_6'),
                    Button.inline('CNY ¬•', b'Currency_7'),
                    Button.inline('KZT ‚Ç∏', b'Currency_8'),
                ],
                [
                    Button.inline('UZS Som', b'Currency_9'),
                    Button.inline('GEL ‚Çæ', b'Currency_10'),
                    Button.inline('TRY ‚Ç∫', b'Currency_11'),
                    Button.inline('KRW ‚Ç©', b'Currency_12'),
                ],
                [
                    Button.inline('TJS —Å', b'Currency_13'),
                    Button.inline('PLN z≈Ç', b'Currency_14'),
                    Button.inline('THB ‡∏ø', b'Currency_15'),
                    Button.inline('KGS Som', b'Currency_16'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'HideBalances'))
async def hidebalances(event):
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")

    buttons=[
                [
                    Button.inline('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ', b'Balances_SHOWALL'),
                ],
                [
                    Button.inline('–°–∫—Ä—ã–≤–∞—Ç—å –Ω—É–ª–µ–≤—ã–µ', b'Balances_HIDEZEROS'),
                ],
                [
                    Button.inline('–°–∫—Ä—ã–≤–∞—Ç—å –º–µ–Ω–µ–µ 1 USD', b'Balances_HIDELESS'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'DevChat'))
async def devchat(event):
    text = (f"ü§ñ <b>Rocket Pay</b>\n\n"
            f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –≤ TON –∏–ª–∏ USDT.\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ–ø–ª–∞—Ç—ã:</b>")

    buttons=[
                [
                    Button.url('TON', 'https://t.me/+mA9IoHSdvIRhZjFi'),
                    Button.url('USDT', 'https://t.me/+Tzm3cgbDZR0zZWMy'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'RocketPay'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)


@client.on(events.CallbackQuery(data=b'Create_Swap'))
async def create_swap(event):
    text = (f"üíº <b>–°–¥–µ–ª–∫–∏</b>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>")

    buttons=[
                [
                    Button.inline('TON', b'fromCoin_1'),
                    Button.inline('USDT', b'fromCoin_30'),
                ],
                [
                    Button.inline('‚Äπ –°–¥–µ–ª–∫–∏', b'Swaps'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'BotExchange'))
async def botexchange(event):
    text = (f"üí± <b>–ë–∏—Ä–∂–∞</b>\n\n"
            f"–¢–æ—Ä–≥—É–π—Ç–µ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω–æ–π –±–∏—Ä–∂–µ.\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>0.1%</b> –¥–ª—è –º–µ–π–∫–µ—Ä–æ–≤ –∏ <b>0.15%</b> –¥–ª—è —Ç–µ–π–∫–µ—Ä–æ–≤ <b>—Å –ø–æ–ª—É—á–∞–µ–º–æ–π</b> —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞.")

    buttons=[
                [
                    Button.inline('–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä', b'CreateOrder'),
                ],
                [
                    Button.inline('–ö–Ω–∏–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤', b'OrderBook'),
                ],
                [
                    Button.inline('–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', b'MyOrders'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'ExchangeV2'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'CreateOrder'))
@client.on(events.CallbackQuery(data=b'OrderBook'))
async def createorder_orderbook(event):
    ton_usdt_price = get_ton_usd_price()

    text = (f"üí± <b>–ë–∏—Ä–∂–∞</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –ø–∞—Ä—É –¥–ª—è <b>—Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞</b>:")

    buttons=[
                [
                    Button.inline(f'TON/USDT ¬∑ {ton_usdt_price} USDT', b'Pair_ton_usdt'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'BotExchange'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Settings_Exchange'))
async def settings_sxchange(event):
    text = (f"üí± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏</b>\n\n"
            f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –∫–ª—é—á–æ–º Exchange API, –∞ —Ç–∞–∫ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    buttons=[
                [
                    Button.inline('API Token', b'ApiKey'),
                ],
                [
                    Button.inline('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', b'Notifications'),
                ],
                [
                    Button.url('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Exchange Api', 'https://trade.ton-rocket.com/api'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'ExchangeV2'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'ApiKey'))
async def apikey(event):
    text = (f"üí± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>Exchange API</b> –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –í–∞—à–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ.\n\n"
            f"–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞ –∫ <b>Exchange API</b>\n\n"
            f"üí≥ <b>–í–∞—à API Token:</b> <code>2c8YFrsgccg3aJifSg45Z7cuWTXEd6</code>")

    buttons=[
                [
                    Button.inline('üîÑ –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å API Token', b'RenewKey'),
                ],
                [
                    Button.inline('üåê –í–µ–±—Ö—É–∫–∏: –≤—ã–∫–ª', b'Webhooks'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings_Exchange'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Notifications'))
async def notifications(event):
    text = (f"üí± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏</b>\n\n"
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    buttons=[
                [
                    Button.inline('–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: –°–æ –∑–≤—É–∫–æ–º', b'NotificationPartially'),
                ],
                [
                    Button.inline('–ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: –°–æ –∑–≤—É–∫–æ–º', b'NotificationFull'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Settings_Exchange'),
                ],
            ]
    
    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Cheques'))
async def cheques(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    user_data["creating_cheque"] = False
    save_user_data(user_id, user_data)

    text = (f"üè∑ <b>–ß–µ–∫–∏</b>\n\n"
            f"<b>–ß–µ–∫–∏</b> –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
            f"¬∑ <i>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</i> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            f"¬∑ <i>–ú—É–ª—å—Ç–∏-—á–µ–∫</i> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            f"¬∑ <i>Rocket-—á–µ–∫</i> - —É–ª—É—á—à–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏-—á–µ–∫ —Å –Ω–∞–≥—Ä–∞–¥–æ–π –∑–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:</b>")

    buttons = [
        [
            Button.inline('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π', b'Personal'),
            Button.inline('–ú—É–ª—å—Ç–∏-—á–µ–∫', b'Multi'),
        ],
        [
            Button.inline('üöÄ Rocket-—á–µ–∫', b'Rocket'),
        ],
        [
            Button.inline('üéÅ –î–æ—Å–∫–∞ —á–µ–∫–æ–≤', b'ChequeBoard'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
        ],
    ]

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Personal'))
async def personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    user_data["creating_cheque"] = False
    save_user_data(user_id, user_data)

    cheque_count = len([cheque for cheque in user_data["cheques"] if cheque["status"] == "created"])

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏</b>\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–Ω–µ—Ç–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    buttons = [
        [
            Button.inline('üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫', b'Create_Personal'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Cheques'),
        ],
    ]

    if cheque_count > 0:
        buttons.insert(1, [Button.inline(f'–ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ ¬∑ {cheque_count}', b'My_Personal_Cheques')])

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'Create_Personal'))
async def create_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    buttons = []
    kok = []
    if user_data["balance_ton"] > 0:
        kok.append(Button.inline('TON', b'ton_personal'))
    if user_data["balance_usdt"] > 0:
        kok.append(Button.inline('USDT', b'usdt_personal'))
    
    if kok:
        buttons.append(kok)

    buttons.append([Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')])

    if not buttons:
        text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                f"üí© <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç</b>")
    else:
        text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —á–µ–∫–∞:</b>")

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'ton_personal'))
async def ton_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price

    user_data["creating_cheque"] = True
    user_data["creating_cheque_currency"] = "TON"
    save_user_data(user_id, user_data)

    balance_ton_display = f"{user_data['balance_ton']:.2f}".rstrip('0').rstrip('.')
    balance_ton_price_display = f"{balance_ton_price_in_usd:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"–°–∫–æ–ª—å–∫–æ TON –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞?\n\n"
            f"<b>–ú–∞–∫—Å–∏–º—É–º:</b> <b>{balance_ton_display} TON ({balance_ton_price_display}$)</b>\n"
            f"–ú–∏–Ω–∏–º—É–º: <b>0.00001 TON</b>\n\n"
            f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ TON:</b>")

    buttons = [
        [Button.inline(f'–ú–∞–∫—Å–∏–º—É–º ¬∑ {balance_ton_display} TON ({balance_ton_price_display}$)', b'Max_ton_personal')],
        [Button.inline('‚Äπ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã', b'Create_Personal')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')],
    ]

    message = await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    user_data["last_message_id"] = message.id
    save_user_data(user_id, user_data)

@client.on(events.CallbackQuery(data=b'Max_ton_personal'))
async def max_ton_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    
    cheque_id = generate_cheque_id()
    cheque = {
        "id": cheque_id,
        "type": "personal",
        "amount": user_data["balance_ton"],
        "currency": "TON",
        "status": "created"
    }
    cheque_ton_amount_price_in_usd = cheque["amount"] * get_ton_usd_price()
    cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')
    cheque_price_display = f"{cheque_ton_amount_price_in_usd:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} TON ({cheque_price_display}$)\n\n"
            f"<b>üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>")

    buttons = [
        [Button.inline('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', f'Success_create_ton_personal:{user_data["balance_ton"]}'), Button.inline('‚ùå –û—Ç–∫–ª–æ–Ω—è—é', b'Personal')],
        [Button.inline('‚Äπ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', b'ton_personal')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')]
    ]

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(pattern=b'Success_create_ton_personal:(.*)'))
async def success_create_ton_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    data = float(event.data.decode('utf-8').split(':')[1])
    amount_str = str(data).rstrip('0').rstrip('.') if '.' in str(data) else str(data)
    amount = float(amount_str)

    if amount > user_data["balance_ton"]:
        return

    cheque_id = generate_cheque_id()
    cheque = {
        "id": cheque_id,
        "type": "personal",
        "amount": amount,
        "currency": "TON",
        "status": "created"
    }
    user_data["cheques"].append(cheque)
    cheque_ton_amount_price_in_usd = cheque["amount"] * get_ton_usd_price()
    user_data["balance_ton"] -= amount
    save_user_data(user_id, user_data)

    user_data["creating_cheque"] = False
    save_user_data(user_id, user_data)

    cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')
    cheque_price_display = f"{cheque_ton_amount_price_in_usd:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} TON ({cheque_price_display}$)\n\n"
            f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> "
            f"–î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. "
            f"–ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
            f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫</b>: <span class='tg-spoiler'>t.me/{bot_username}?start={cheque_id}</span>")

    buttons=[
                [
                    types.KeyboardButtonSwitchInline(
                        'üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 
                        f'{cheque_id}')
                ],
                [
                    Button.inline('–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', f'Qr:{cheque_id}'),
                ],
                [
                    Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}'),
                ],
                [
                    Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}'),
                ],
                [
                    Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal'),
                ],
            ]

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) —Å–æ–∑–¥–∞–ª —á–µ–∫ –Ω–∞ {cheque_amount_display} TON, ID —á–µ–∫–∞: {cheque_id}")

@client.on(events.CallbackQuery(pattern=b'Success_create_usdt_personal:(.*)'))
async def success_create_usdt_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    data = float(event.data.decode('utf-8').split(':')[1])
    amount_str = str(data).rstrip('0').rstrip('.') if '.' in str(data) else str(data)
    amount = float(amount_str)

    if amount > user_data["balance_usdt"]:
        return

    cheque_id = generate_cheque_id()
    cheque = {
        "id": cheque_id,
        "type": "personal",
        "amount": amount,
        "currency": "USDT",
        "status": "created"
    }
    user_data["cheques"].append(cheque)
    user_data["balance_usdt"] -= amount
    user_data["creating_cheque"] = False
    save_user_data(user_id, user_data)

    cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} USDT ({cheque_amount_display}$)\n\n"
            f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> "
            f"–î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. "
            f"–ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
            f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫</b>: <span class='tg-spoiler'>t.me/xRokeetBot?start={cheque_id}</span>")

    buttons=[
                [
                    types.KeyboardButtonSwitchInline(
                        'üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 
                        f'{cheque_id}')
                ],
                [
                    Button.inline('–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', f'Qr:{cheque_id}'),
                ],
                [
                    Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}'),
                ],
                [
                    Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}'),
                ],
                [
                    Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal'),
                ],
            ]

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) —Å–æ–∑–¥–∞–ª —á–µ–∫ –Ω–∞ {cheque_amount_display} USDT, ID —á–µ–∫–∞: {cheque_id}")

@client.on(events.CallbackQuery(pattern=b'Comment:'))
async def add_comment(event):
    button = event.data.decode()
    cheque_id = button.split(':')[1]
    message = await event.edit(
        text=(f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
              f"<i>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —á–µ–∫—É.</i>\n\n"
              f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - <b>1000 —Å–∏–º–≤–æ–ª–æ–≤</b></i>"),
        buttons=[Button.inline('‚Äπ –ù–∞–∑–∞–¥', f'cheque_{cheque_id}')],
        parse_mode="html"
    )
    user_data = load_user_data(event.sender_id)
    user_data['adding_comment'] = cheque_id
    user_data["last_message_id"] = message.id
    save_user_data(event.sender_id, user_data)

@client.on(events.CallbackQuery(pattern=b'rm_comment:'))
async def remove_comment(event):
    button = event.data.decode()
    cheque_id = button.split(':')[1]
    user_data = load_user_data(event.sender_id)

    for cheque in user_data['cheques']:
        if cheque['id'] == cheque_id:
            cheque['comment'] = ''
            break

    save_user_data(event.sender_id, user_data)
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) —É–¥–∞–ª–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —á–µ–∫–∞, ID —á–µ–∫–∞: {cheque_id}")

    await showkok(event, cheque_id)

@client.on(events.CallbackQuery(pattern=b'Delete:'))
async def delete_cheque(event):
    button = event.data.decode()
    cheque_id = button.split(':')[1]
    user_data = load_user_data(event.sender_id)

    cheque = next((cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id), None)
    
    if not cheque:
        await event.reply("–ß–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    amount = cheque['amount']
    currency = cheque['currency']

    if currency == "TON":
        user_data['balance_ton'] += amount
    elif currency == "USDT":
        user_data['balance_usdt'] += amount   
    
    user_data['cheques'] = [chq for chq in user_data['cheques'] if chq['id'] != cheque_id]
    save_user_data(event.sender_id, user_data)

    await event.answer("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) —É–¥–∞–ª–∏–ª —á–µ–∫, ID —á–µ–∫–∞: {cheque_id}")

    cheque_count = len([cheque for cheque in user_data["cheques"] if cheque["status"] == "created"])

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏</b>\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–Ω–µ—Ç–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    buttons = [
        [
            Button.inline('üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫', b'Create_Personal'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Cheques'),
        ],
    ]

    if cheque_count > 0:
        buttons.insert(1, [Button.inline(f'–ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ ¬∑ {cheque_count}', b'My_Personal_Cheques')])

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(pattern=b'Qr:(.*)'))
async def show_qr_code(event):
    user_data = load_user_data(event.sender_id)
    cheque_id = event.pattern_match.group(1).decode('utf-8')
    cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
    amount = float(cheque["amount"])
    amount_str = f'{amount:.2f}'.rstrip('0').rstrip('.')
    amount_in_usd = amount * get_ton_usd_price()

    comment = cheque.get('comment', '')
    tied_to_user = cheque.get('tied_to_user', {})

    qr_url = f"https://api.qrcode-monkey.com/qr/custom?data=https%3A%2F%2Ft.me%2FxRokeetBot%3Fstart%3D{cheque_id}&config=%7B%22body%22%3A%22circular%22%2C%22eye%22%3A%22frame13%22%2C%22eyeBall%22%3A%22ball15%22%2C%22bodyColor%22%3A%22%23159af6%22%2C%22bgColor%22%3A%22%23FFFFFF%22%2C%22eye1Color%22%3A%22%23159af6%22%2C%22eye2Color%22%3A%22%23159af6%22%2C%22eye3Color%22%3A%22%23159af6%22%2C%22eyeBall1Color%22%3A%22%23159af6%22%2C%22eyeBall2Color%22%3A%22%23159af6%22%2C%22eyeBall3Color%22%3A%22%23159af6%22%7D&size=1500"

    text = (f"<a href='{qr_url}'>‚Äç</a>üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"<b>–°—É–º–º–∞ —á–µ–∫–∞:</b> {amount_str} {cheque['currency']} ({amount_in_usd:.2f}$)\n\n")

    if tied_to_user:
        text += f"–¢–æ–ª—å–∫–æ –¥–ª—è <a href='tg://user?id={tied_to_user['id']}'><b>{tied_to_user['name']}</b></a>\n\n"

    if comment:
        text += f"üí¨ {comment}\n\n"

    text += (f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> –î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. –ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:</b>\n<span class='tg-spoiler'>t.me/{bot_username}?start={cheque_id}</span>")

    buttons = [
        [
            types.KeyboardButtonSwitchInline('üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', f'{cheque_id}')
        ],
        [
            Button.inline('–°–∫—Ä—ã—Ç—å QR-–∫–æ–¥', f'HideQr:{cheque_id}'),
        ],
    ]

    if comment:
        buttons.append([Button.inline('–£–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'rm_comment:{cheque_id}')])
    else:
        buttons.append([Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}')])

    if tied_to_user:
        buttons.append([Button.inline('–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f'Unlock:{cheque_id}')])
    else:
        buttons.append([Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}')])

    buttons.extend([
        [Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'My_Personal_Cheques')],
    ])

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=True)

@client.on(events.CallbackQuery(pattern=b'HideQr:(.*)'))
async def hide_qr_code(event):
    user_data = load_user_data(event.sender_id)
    cheque_id = event.pattern_match.group(1).decode('utf-8')
    cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
    amount = float(cheque["amount"])
    amount_str = f'{amount:.2f}'.rstrip('0').rstrip('.')
    amount_in_usd = amount * get_ton_usd_price()

    comment = cheque.get('comment', '')

    tied_to_user = cheque.get('tied_to_user', {})
    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫\n\n"
            f"–°—É–º–º–∞ —á–µ–∫–∞:</b> {amount_str} {cheque['currency']} ({amount_in_usd:.2f}$)\n\n")

    if tied_to_user:
        text += f"–¢–æ–ª—å–∫–æ –¥–ª—è <a href='tg://user?id={tied_to_user['id']}'><b>{tied_to_user['name']}</b></a>\n\n"

    if comment:
        text += f"üí¨ {comment}\n\n"

    text += (f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> –î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. –ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:</b>\n<span class='tg-spoiler'>t.me/{bot_username}?start={cheque_id}</span>")

    buttons = [
        [
            types.KeyboardButtonSwitchInline('üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', f'{cheque_id}')
        ],
        [
            Button.inline('–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', f'Qr:{cheque_id}'),
        ],
    ]

    if comment:
        buttons.append([Button.inline('–£–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'rm_comment:{cheque_id}')])
    else:
        buttons.append([Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}')])

    if tied_to_user:
        buttons.append([Button.inline('–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f'Unlock:{cheque_id}')])
    else:
        buttons.append([Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}')])

    buttons.extend([
        [Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'My_Personal_Cheques')],
    ])

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(pattern=b'Lock:'))
async def add_lock(event):
    button = event.data.decode()
    cheque_id = button.split(':')[1]
    message = await event.edit(
        text=(f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
              f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>@username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ."),
        buttons=[Button.inline('‚Äπ –ù–∞–∑–∞–¥', f'cheque_{cheque_id}')],
        parse_mode="html"
    )
    user_data = load_user_data(event.sender_id)
    user_data['locking_cheque'] = cheque_id
    user_data["last_message_id"] = message.id
    save_user_data(event.sender_id, user_data)

@client.on(events.CallbackQuery(pattern=b'Unlock:'))
async def remove_lock(event):
    button = event.data.decode()
    cheque_id = button.split(':')[1]
    user_data = load_user_data(event.sender_id)
    cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) –æ—Ç–≤—è–∑–∞–ª —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cheque['tied_to_user']['name']} (ID: {cheque['tied_to_user']['id']}), ID —á–µ–∫–∞: {cheque['id']}")
    cheque.pop('tied_to_user', None)
    save_user_data(event.sender_id, user_data)

    await showkok(event, cheque_id)

@client.on(events.CallbackQuery(data=b'usdt_personal'))
async def usdt_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    user_data["creating_cheque"] = True
    user_data["creating_cheque_currency"] = "USDT"
    save_user_data(user_id, user_data)

    balance_USDT_display = f"{user_data['balance_usdt']:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"–°–∫–æ–ª—å–∫–æ USDT –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞?\n\n"
            f"<b>–ú–∞–∫—Å–∏–º—É–º:</b> <b>{balance_USDT_display} USDT ({balance_USDT_display}$)</b>\n"
            f"–ú–∏–Ω–∏–º—É–º: <b>0.00001 USDT</b>\n\n"
            f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ USDT:</b>")

    buttons = [
        [Button.inline(f'–ú–∞–∫—Å–∏–º—É–º ¬∑ {balance_USDT_display} USDT ({balance_USDT_display}$)', b'Max_usdt_personal')],
        [Button.inline('‚Äπ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã', b'Create_Personal')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')],
    ]

    message = await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    user_data["last_message_id"] = message.id
    save_user_data(user_id, user_data)

@client.on(events.CallbackQuery(data=b'Max_usdt_personal'))
async def max_usdt_personal(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    
    cheque_id = generate_cheque_id()
    cheque = {
        "id": cheque_id,
        "type": "personal",
        "amount": user_data["balance_usdt"],
        "currency": "USDT",
        "status": "created"
    }
    cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
            f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} USDT ({cheque_amount_display}$)\n\n"
            f"<b>üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>")

    buttons = [
        [Button.inline('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', f'Success_create_usdt_personal:{user_data["balance_usdt"]}'), Button.inline('‚ùå –û—Ç–∫–ª–æ–Ω—è—é', b'Personal')],
        [Button.inline('‚Äπ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', b'usdt_personal')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')]
    ]

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(data=b'My_Personal_Cheques'))
async def my_personal_cheques(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    cheques = [cheque for cheque in user_data["cheques"] if cheque["status"] == "created"]

    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏\n\n"
            f"–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤:</b>")

    buttons = []
    for cheque in cheques:
        amount = f'{cheque["amount"]}'.rstrip('0').rstrip('.')
        if cheque["currency"] == "USDT":
            amount_in_usd = amount
        else:
            amount_in_usd = f'{cheque["amount"] * get_ton_usd_price():.2f}'.rstrip('0').rstrip('.')

        description_parts = [f'{amount} {cheque["currency"]} ({amount_in_usd}$)']
        
        if "tied_to_user" in cheque:
            tied_user = cheque["tied_to_user"]
            description_parts.append(f'¬∑ {tied_user["name"]}')
        
        if "comment" in cheque:
            description_parts.append(f'¬∑ {cheque["comment"]}')
        
        description_text = ' '.join(description_parts)

        buttons.append([
            Button.inline(
                description_text, 
                f'cheque_{cheque["id"]}'
            )
        ])

    buttons.append([Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')])

    await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.CallbackQuery(pattern=b'cheque_'))
async def show_cheque(event):
    button = event.data.decode()
    cheque_id = f"t_{button.split('_')[2]}"
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    cheque = None
    for c in user_data["cheques"]:
        if c["id"] == f"{cheque_id}":
            cheque = c
            break

    if cheque is None:
        await event.respond("<b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. (what??)</b>", parse_mode="html")
        return

    amount = f'{cheque["amount"]}'.rstrip('0').rstrip('.')
    amount_in_usd = cheque["amount"] if cheque["currency"] == "USDT" else cheque["amount"] * get_ton_usd_price()
    comment = cheque.get('comment', '')
    tied_to_user = cheque.get('tied_to_user', {})
    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫\n\n"
            f"–°—É–º–º–∞ —á–µ–∫–∞:</b> {amount} {cheque['currency']} ({amount_in_usd:.2f}$)\n\n")

    if tied_to_user:
        text += f"–¢–æ–ª—å–∫–æ –¥–ª—è <a href='tg://user?id={tied_to_user['id']}'><b>{tied_to_user['name']}</b></a>\n\n"

    if comment:
        text += f"üí¨ {comment}\n\n"

    text += (f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> –î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. –ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:</b>\n<span class='tg-spoiler'>t.me/{bot_username}?start={cheque_id}</span>")

    buttons=[
        [
            types.KeyboardButtonSwitchInline('üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', f'{cheque_id}')
        ],
        [
            Button.inline('–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', f'Qr:{cheque_id}'),
        ],
    ]

    if comment:
        buttons.append([Button.inline('–£–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'rm_comment:{cheque_id}')])
    elif not comment:
        buttons.append([Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}')])

    if tied_to_user:
        buttons.append([Button.inline('–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f'Unlock:{cheque_id}')])
    else:
        buttons.append([Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}')])

    buttons.extend([
        [Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'My_Personal_Cheques')],
    ])

    message = await event.edit(text, buttons=buttons, parse_mode='html', link_preview=False)
    user_data["last_message_id"] = message.id
    save_user_data(user_id, user_data)

@client.on(events.CallbackQuery(data=b'newsletter'))
async def newsletter(event):
    if event.sender_id != admin_id:
        return

    user_count = len(os.listdir('users'))
    cheque_count = sum(len(load_user_data(user_id)['cheques']) for user_id in [int(f.split('.')[0]) for f in os.listdir('users')])

    uptime = datetime.now() - start_time
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    uptime_parts = []
    if days > 0:
        uptime_parts.append(f"{days} –¥")
    if hours > 0 or days > 0:
        uptime_parts.append(f"{hours} —á")
    if minutes > 0 or hours > 0 or days > 0:
        uptime_parts.append(f"{minutes} –º–∏–Ω")
    uptime_parts.append(f"{seconds} —Å–µ–∫")

    uptime_text = " ".join(uptime_parts)

    text = (f'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n'
            f'üìä <b>–ú–∏–Ω–∏-—Å—Ç–∞—Ç–∞:</b>\n\n'
            f'üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{user_count}</code>\n'
            f'üßæ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <code>{cheque_count}</code>\n\n'
            f'‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞: <code>{uptime_text}</code>\n\n')

    await event.edit(text, parse_mode="html")

    async with client.conversation(event.sender_id) as conv:
        await conv.send_message(f'üí¨ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ò–ª–∏<b> "<code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>" <b>–¥–ª—è –æ—Ç–º–µ–Ω—ã</b>\n\n'
                                f'‚úÖ <i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞, —Å—Ç–∏–∫–µ—Ä—ã, –∫—Ä—É–∂–∫–∏, —Ñ–∞–π–ª—ã, –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å URL –∫–Ω–æ–ø–∫–∞–º–∏!!)</i>', parse_mode="html")

        while True:
            response = await conv.get_response()

            if response.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
                await conv.send_message('üòï <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>', parse_mode="html")
                return

            gavgavgav = response #—Å–æ—Ä—Ä–∏ –∑–∞ —Ç–æ —á—Ç–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Å—Ç–∞—Ö —Ç–∞–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è üòî –ø—Ä–æ—Å—Ç–æ –º–Ω–µ —Ç–∞–∫ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ—á–µ–º—É —Ç–æ...
            break

        await send_newsletter(gavgavgav)
        await conv.send_message('üëæ <i>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</i>', parse_mode="html")