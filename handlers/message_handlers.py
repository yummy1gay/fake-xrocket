from telethon import events, types, Button

from utils.data_management import create_new_user, load_user_data, save_user_data
from utils.external_services import get_ton_usd_price, generate_cheque_id, format_balance

import json
from datetime import datetime
import os

from bot import client, start_time
from config import *

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    user = await client.get_entity(user_id)
    first_name = user.first_name
    last_name = user.last_name
    username = user.username

    user_data = load_user_data(user_id)
    if not user_data:
        user_data = create_new_user(user_id, first_name, last_name, username)

    user_data["creating_cheque"] = False
    user_data['locking_cheque'] = None
    user_data['adding_comment'] = None
    save_user_data(user_id, user_data)

    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
    balance_usdt = user_data["balance_usdt"]
    total_balance = balance_ton_price_in_usd + balance_usdt
    cheque_count = len([cheque for cheque in user_data["cheques"] if cheque["status"] == "created"])

    text = (f"üöÄ <b>xRocket</b> ‚Äî —ç—Ç–æ –±–æ—Ç-–∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–∫—É–ø–∫–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ Telegram.\n\n"
            f"–û –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —á–∏—Ç–∞–π—Ç–µ –≤ <a href='https://t.me/xrocketnewsru'>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ</a>")

    buttons = [
        [
            Button.inline(f'üíµ –ú–æ–π –∫–æ—à–µ–ª–µ–∫ ({total_balance:.2f}$)', b'Wallet'),
        ],
        [
            types.KeyboardButtonWebView(
                "üí± Web-–±–∏—Ä–∂–∞",
                "https://web.ton-rocket.com/",
        )
        ],
        [
            Button.inline(f'üè∑ –ß–µ–∫–∏' + (f' ¬∑ {cheque_count}' if cheque_count > 0 else ''), b'Cheques'),
            Button.inline('üó≥ P2P –ú–∞—Ä–∫–µ—Ç', b'P2P'),
        ],
        [
            Button.inline('üí± –ë–∏—Ä–∂–∞', b'ExchangeV2'),
            Button.inline('üìã –°—á–µ—Ç–∞', b'Invoices'),
        ],
        [
            Button.inline('üíº –°–¥–µ–ª–∫–∏', b'Swaps'),
            Button.inline('üåü –ü–æ–¥–ø–∏—Å–∫–∏', b'Subscriptions'),
        ],
        [
            Button.inline('ü§ñ Rocket Pay', b'RocketPay'),
            Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', b'Settings'),
        ],
    ]
    if event.message.text == "/start":
        await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/market'))
async def market(event):
    text = (f'üó≥ <b>–ú–∞—Ä–∫–µ—Ç</b>\n\n'
            f'–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ</b>, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–∞—è—Å—å –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'
            f'–ë–æ—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç <b>–≥–∞—Ä–∞–Ω—Ç–æ–º –≤ —Å–¥–µ–ª–∫–µ</b>, <b>–±–ª–æ–∫–∏—Ä—É—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</b> –≤–æ –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.\n\n'
            f'–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞ –º–∞—Ä–∫–µ—Ç–∞ - <b>UAH</b>, –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞—Ä–∫–µ—Ç–∞</b>.\n\n'
            f'–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É - <b>0%</b>, –Ω–∞ –ø—Ä–æ–¥–∞–∂—É - <b>1%</b>\n\n'
            f'–ï—Å–ª–∏ –í—ã –Ω–∞—à–ª–∏ <b>–æ—à–∏–±–∫—É</b> –∏–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ <b>—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç –∏–ª–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã</b>, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ <a href="https://t.me/{support_bot_username}"><b>—Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É</b></a>.')

    buttons=[
                [
                    Button.inline('–ö—É–ø–∏—Ç—å', b'Buy'),
                    Button.inline('–ü—Ä–æ–¥–∞—Ç—å', b'Sell'),
                ],
                [
                    Button.inline('‚ùáÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', b'Create'),
                ],
                [
                    Button.inline('–ú–æ–∏ —Å–¥–µ–ª–∫–∏', b'ActiveUserDeals'),
                ],
                [
                    Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ç–∞', b'P2P_Settings'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/wallet'))
async def wallet(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    ton_usd_price = get_ton_usd_price()
    balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
    balance_ton = f'{user_data["balance_ton"]:f}'.rstrip('0').rstrip('.')
    balance_usdt = f'{user_data["balance_usdt"]:f}'.rstrip('0').rstrip('.')
    total_balance = balance_ton_price_in_usd + float(balance_usdt)

    text = (f'üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n'
            f'<a href="https://ton.org/"><b>TON</b></a>: {balance_ton} TON ({balance_ton_price_in_usd:.2f}$)\n\n'
            f'<a href="https://tether.to/"><b>USDT</b></a>: {balance_usdt} USDT ({balance_usdt}$)\n\n'
            f'<b>‚âà {total_balance:.2f}$</b>')
    buttons = [
        [
            Button.inline('üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', b'Deposit'),
            Button.inline('üì§ –í—ã–≤–æ–¥', b'Withdraw'),
        ],
        [
            types.KeyboardButtonSwitchInline(
                'üè∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏', 
                f'')
        ],
        [
            Button.inline('üñº NFT', b'NFT'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
        ],
    ]
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/exchange'))
async def exchange(event):
    text = (f"üí± <b>–ë–∏—Ä–∂–∞</b>\n\n"
            f"–¢–æ—Ä–≥—É–π—Ç–µ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω–æ–π –±–∏—Ä–∂–µ.\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>0.1%</b> –¥–ª—è –º–µ–π–∫–µ—Ä–æ–≤ –∏ <b>0.15%</b> –¥–ª—è —Ç–µ–π–∫–µ—Ä–æ–≤ <b>—Å –ø–æ–ª—É—á–∞–µ–º–æ–π</b> —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞.")

    buttons=[
                [
                    types.KeyboardButtonWebView(
                        "üí± Web-–±–∏—Ä–∂–∞",
                        "https://web.ton-rocket.com/",
                )
                ],
                [
                    Button.inline('–ë–æ—Ç-–±–∏—Ä–∂–∞', b'BotExchange'),
                ],
                [
                    Button.inline('üèÜ –†–µ–π—Ç–∏–Ω–≥', b'Rank'),
                    Button.inline('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', b'Settings_Exchange'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/settings'))
async def settings(event):
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–í–∞—à —è–∑—ã–∫: <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b>\n"
            f"–í–∞–ª—é—Ç–∞ –±–æ—Ç–∞: <b>USD ¬∑ $</b>")

    buttons=[
                [
                    Button.url('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', f'https://t.me/{support_bot_username}'),
                ],
                [
                    Button.inline('üí≤ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤', b'HideBalances'),
                ],
                [
                    Button.inline('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏', b'HideCoins'),
                ],
                [
                    Button.inline('–Ø–∑—ã–∫ –±–æ—Ç–∞', b'Language'),
                    Button.inline('–í–∞–ª—é—Ç–∞ –±–æ—Ç–∞', b'BotCurrency'),
                ],
                [
                    Button.inline('üìÑ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π', b'History'),
                ],
                [
                    Button.inline('üîå –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫', b'LinkWallet'),
                ],
                [
                    Button.inline('üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', b'GroupsManagement'),
                ],
                [
                    Button.inline('üí• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', b'RefSystem'),
                ],
                [
                    Button.inline('‚òÑÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞', b'Listing'),
                ],
                [
                    Button.inline('üåÖ –õ–∏–º–∏—Ç—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏', b'LimitsFees'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/cheques'))
async def cheques(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)

    user_data["creating_cheque"] = False
    save_user_data(user_id, user_data)

    text = (f"üè∑ <b>–ß–µ–∫–∏</b>\n\n"
            f"<b>–ß–µ–∫–∏</b> –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
            f"¬∑ <i>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</i> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            f"¬∑ <i>–ú—É–ª—å—Ç–∏-—á–µ–∫</i> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            f"¬∑ <i>Rocket-—á–µ–∫</i> - —É–ª—É—á—à–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏-—á–µ–∫ —Å –Ω–∞–≥—Ä–∞–¥–æ–π –∑–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:</b>")

    buttons = [
        [
            Button.inline('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π', b'Personal'),
            Button.inline('–ú—É–ª—å—Ç–∏-—á–µ–∫', b'Multi'),
        ],
        [
            Button.inline('üöÄ Rocket-—á–µ–∫', b'Rocket'),
        ],
        [
            Button.inline('üéÅ –î–æ—Å–∫–∞ —á–µ–∫–æ–≤', b'ChequeBoard'),
        ],
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
        ],
    ]

    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/invoices'))
async def invoices(event):
    text = (f"üìã <b>–°—á–µ—Ç–∞</b>\n\n"
            f"<b>–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:</b>\n"
            f"¬∑ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π - <i>—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑</i>\n"
            f"¬∑ –º—É–ª—å—Ç–∏-—Å—á—ë—Ç - <i>—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–≥—É—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑</i>\n\n"
            f"–û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å—á–µ—Ç–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ <b>xRocket</b>, –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ <b>–±–ª–æ–∫—á–µ–π–Ω-–∞–¥—Ä–µ—Å—É</b>.")

    buttons=[
                [
                    Button.inline('–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π', b'Single'),
                    Button.inline('–ú—É–ª—å—Ç–∏-—Å—á—ë—Ç', b'Multi'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/subscriptions'))
async def subscriptions(event):
    text = (f"üåü <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.\n\n"
            f"<b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> <i>- –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏</i>\n"
            f"<b>–°–æ–∑–¥–∞–Ω–Ω—ã–µ</b> <i>- —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –í–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏</i>")

    buttons=[
                [
                    Button.inline('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', b'My'),
                    Button.inline('–°–æ–∑–¥–∞–Ω–Ω—ã–µ', b'Created'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage(pattern='/rocketpay'))
async def rocketpay(event):
    text = (f"ü§ñ <b>Rocket Pay</b>\n\n"
            f"–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–µ <b>API Rocket Pay</b> üöÄ –≤ —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å.\n\n"
            f"<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫–∏, —Å—á–µ—Ç–∞ –∏ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ API.</b>\n\n"
            f"<i>–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>1.5%</b>  (–¥–ª—è —Å—á–µ—Ç–æ–≤ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π), –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ <b>–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.</b></i>")

    buttons=[
                [
                    Button.inline('–°–æ–∑–¥–∞—Ç—å', b'Create'),
                ],
                [
                    Button.url('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Rocket Api', 'https://pay.ton-rocket.com/api/'),
                ],
                [
                    Button.url('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Exchange Api', 'https://trade.ton-rocket.com/api'),
                ],
                [
                    Button.inline('–ß–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ê–ü–ò', b'DevChat'),
                ],
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Back'),
                ],
            ]
    
    await event.respond(text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage)
async def amount(event):
    user_id = event.sender_id
    user_data = load_user_data(user_id)
    if user_data["creating_cheque"] == False:
        return

    last_message_id = user_data.get("last_message_id")
    try:
        amount = float(event.message.message)
        if amount <= 0:
            raise ValueError

        currency = user_data.get("creating_cheque_currency")
        if currency == "TON":
            if amount > user_data["balance_ton"]:
                ton_usd_price = get_ton_usd_price()
                balance_ton_price_in_usd = user_data["balance_ton"] * ton_usd_price
                balance_ton_display = f"{user_data['balance_ton']:.2f}".rstrip('0').rstrip('.')
                balance_ton_price_display = f"{balance_ton_price_in_usd:.2f}".rstrip('0').rstrip('.')

                text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                        f"–°–∫–æ–ª—å–∫–æ TON –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞?\n\n"
                        f"<b>–ú–∞–∫—Å–∏–º—É–º:</b> <b>{balance_ton_display} TON ({balance_ton_price_display}$)</b>\n"
                        f"–ú–∏–Ω–∏–º—É–º: <b>0.00001 TON</b>\n\n"
                        f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ TON:</b>\n\n"
                        f"üî∫ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>")

                buttons = [
                    [Button.inline(f'–ú–∞–∫—Å–∏–º—É–º ¬∑ {balance_ton_display} TON ({balance_ton_price_display}$)', b'Max_ton_personal')],
                    [Button.inline('‚Äπ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã', b'Create_Personal')],
                    [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')],
                ]

                await event.message.delete()
                await client.edit_message(event.chat_id, last_message_id, text, buttons=buttons, parse_mode='html', link_preview=False)
                return

            cheque_id = generate_cheque_id()
            cheque = {
                "id": cheque_id,
                "type": "personal",
                "amount": amount,
                "currency": "TON",
                "status": "created"
            }
            cheque_ton_amount_price_in_usd = cheque["amount"] * get_ton_usd_price()
            cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')
            cheque_price_display = f"{cheque_ton_amount_price_in_usd:.2f}".rstrip('0').rstrip('.')

            text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                    f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} TON ({cheque_price_display}$)\n\n"
                    f"<b>üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>")

            buttons = [
                [Button.inline('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', f'Success_create_ton_personal:{amount}'), Button.inline('‚ùå –û—Ç–∫–ª–æ–Ω—è—é', b'Personal')],
                [Button.inline('‚Äπ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', b'ton_personal')],
                [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')]
            ]

        elif currency == "USDT":
            if amount > user_data["balance_usdt"]:
                balance_USDT_display = f"{user_data['balance_usdt']:.2f}".rstrip('0').rstrip('.')

                text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                        f"–°–∫–æ–ª—å–∫–æ USDT –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞?\n\n"
                        f"<b>–ú–∞–∫—Å–∏–º—É–º:</b> <b>{balance_USDT_display} USDT ({balance_USDT_display}$)</b>\n"
                        f"–ú–∏–Ω–∏–º—É–º: <b>0.00001 USDT</b>\n\n"
                        f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ USDT:</b>\n\n"
                        f"üî∫ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>")

                buttons = [
                    [Button.inline(f'–ú–∞–∫—Å–∏–º—É–º ¬∑ {balance_USDT_display} USDT ({balance_USDT_display}$)', b'Max_usdt_personal')],
                    [Button.inline('‚Äπ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã', b'Create_Personal')],
                    [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')],
                ]

                await event.message.delete()
                await client.edit_message(event.chat_id, last_message_id, text, buttons=buttons, parse_mode='html', link_preview=False)
                return

            cheque_id = generate_cheque_id()
            cheque = {
                "id": cheque_id,
                "type": "personal",
                "amount": amount,
                "currency": "USDT",
                "status": "created"
            }
            cheque_amount_display = f"{cheque['amount']:.2f}".rstrip('0').rstrip('.')

            text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                    f"<b>–°—É–º–º–∞ —á–µ–∫–∞</b>: {cheque_amount_display} USDT ({cheque_amount_display}$)\n\n"
                    f"<b>üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>")

            buttons = [
                [Button.inline('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', f'Success_create_usdt_personal:{amount}'), Button.inline('‚ùå –û—Ç–∫–ª–æ–Ω—è—é', b'Personal')],
                [Button.inline('‚Äπ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', b'usdt_personal')],
                [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Personal')]
            ]

        await event.message.delete()
        await client.edit_message(event.chat_id, last_message_id, text, buttons=buttons, parse_mode='html', link_preview=False)
    except ValueError:
        return
    
@client.on(events.NewMessage)
async def receive_comment(event):
    user_data = load_user_data(event.sender_id)
    if 'adding_comment' in user_data and user_data['adding_comment']:
        cheque_id = user_data['adding_comment']
        comment = event.raw_text
        if len(comment) > 1000:
            comment = comment[:1000]
        
        try:
            cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
        except StopIteration:
            cheque_id = f't_{cheque_id}'
            try:
                cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
            except StopIteration:
                await event.reply("–ß–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

        cheque['comment'] = comment
        user_data['adding_comment'] = None
        save_user_data(event.sender_id, user_data)

        await showkok(event, cheque_id)
        await event.message.delete()
        if all_logs:
            print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_data['id']}) –¥–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —á–µ–∫—É, —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è: {cheque['comment']}, ID —á–µ–∫–∞: {cheque_id}")
    
async def showkok(event, cheque_id):
    user_data = load_user_data(event.sender_id)
    cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
    amount = float(cheque["amount"])
    amount_str = f'{amount:.2f}'.rstrip('0').rstrip('.')
    amount_in_usd = amount * get_ton_usd_price()

    comment = cheque.get('comment', '')
    last_message_id = user_data.get("last_message_id")

    tied_to_user = cheque.get('tied_to_user', '')
    text = (f"üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫\n\n"
            f"–°—É–º–º–∞ —á–µ–∫–∞:</b> {amount_str} {cheque['currency']} ({amount_in_usd:.2f}$)\n\n")

    if tied_to_user:
        text += f"–¢–æ–ª—å–∫–æ –¥–ª—è <a href='tg://user?id={tied_to_user['id']}'><b>{tied_to_user['name']}</b></a>\n\n"

    if comment:
        text += f"üí¨ {comment}\n\n"

    text += (f"‚ÄºÔ∏è <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.</b> –î–µ–ª–∞—è —ç—Ç–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º —á–µ–∫–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∑–∞–º–µ–Ω. –ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:</b>\n<span class='tg-spoiler'>t.me/{bot_username}?start={cheque_id}</span>")

    buttons = [
        [
            types.KeyboardButtonSwitchInline('üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', f'{cheque_id}')
        ],
        [
            Button.inline('–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', f'Qr:{cheque_id}'),
        ],
    ]

    if comment:
        buttons.append([Button.inline('–£–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'rm_comment:{cheque_id}')])
    else:
        buttons.append([Button.inline('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', f'Comment:{cheque_id}')])

    if tied_to_user:
        buttons.append([Button.inline('–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f'Unlock:{cheque_id}')])
    else:
        buttons.append([Button.inline('–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', f'Lock:{cheque_id}')])

    buttons.extend([
        [Button.inline('–£–¥–∞–ª–∏—Ç—å', f'Delete:{cheque_id}')],
        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'My_Personal_Cheques')],
    ])
    
    await client.edit_message(event.chat_id, last_message_id, text, buttons=buttons, parse_mode='html', link_preview=False)

@client.on(events.NewMessage)
async def receive_lock(event):
    user_input = event.raw_text
    user_data = load_user_data(event.sender_id)

    if 'locking_cheque' in user_data and user_data['locking_cheque']:
        cheque_id = user_data['locking_cheque']
        
        try:
            if event.message.forward:
                user_id = event.message.forward.from_id.user_id
                forwarded_user_data = load_user_data(user_id)
                user_name = forwarded_user_data['first_name'] if forwarded_user_data else None
            else:
                user = await client.get_entity(user_input)
                user_id = user.id
                user_name = user.first_name if user.first_name else None

            cheque = next(cheque for cheque in user_data['cheques'] if cheque['id'] == cheque_id)
            cheque['tied_to_user'] = {'id': user_id, 'name': user_name}
            user_data['locking_cheque'] = None
            save_user_data(event.sender_id, user_data)
            if all_logs:
                print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_id}) –ø—Ä–∏–≤—è–∑–∞–ª —á–µ–∫ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {cheque['tied_to_user']['name']} (ID: {cheque['tied_to_user']['id']}), ID —á–µ–∫–∞: {cheque['id']}")

            await showkok(event, cheque_id)
            await event.message.delete()

        except AttributeError:
            last_message_id = user_data.get("last_message_id")
            text = ("üè∑ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>@username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ.\n\n"
                    f"üî∫ <b>–í—ã –ø–æ—Å–ª–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–±–æ –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏–∑-–∑–∞ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.</b>")
            buttons = [
                        [Button.inline('‚Äπ –ù–∞–∑–∞–¥', f'cheque_{cheque_id}')]
                    ]
            await client.edit_message(event.chat_id, last_message_id, text, buttons=buttons, parse_mode='html', link_preview=False)
            await event.message.delete()

        except Exception as e:
            await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def activate_cheque(event, cheque_id):
    user_id = event.sender_id
    recipient_user_data = load_user_data(user_id)

    all_users_files = [f for f in os.listdir('users') if f.endswith('.json')]
    cheque = None
    sender_user_data = None
    for file in all_users_files:
        with open(f'users/{file}', 'r', encoding='utf-8') as f:
            data = json.load(f)
            for ch in data["cheques"]:
                if ch["id"] == cheque_id and ch["status"] == "created":
                    cheque = ch
                    sender_user_data = data
                    break
        if cheque:
            break

    if cheque:
        tied_to_user = cheque.get('tied_to_user', None)
        
        if tied_to_user:
            if tied_to_user['id'] != user_id:
                lol = [
                    [
                        Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'wallet_message'),
                    ],
                ]
                await event.respond("–í—ã <b>–Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</b> –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.", parse_mode='html', buttons=lol)
                return

        if cheque["status"] != "created":
            kek = [
                [
                    Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Wallet'),
                ],
            ]
            await event.respond("–≠—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ <b>—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>", buttons=kek, parse_mode="html")
            return
    else:
        kek = [
            [
                Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'Wallet'),
            ],
        ]
        await event.respond("–≠—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ <b>–Ω–µ –Ω–∞–π–¥–µ–Ω</b> –∏–ª–∏ <b>—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>", buttons=kek, parse_mode="html")
        return

    cheque["status"] = "activated"
    recipient_user_data[f"balance_{cheque['currency'].lower()}"] += cheque["amount"]
    save_user_data(user_id, recipient_user_data)
    sender_user_data["cheques"] = [ch for ch in sender_user_data["cheques"] if ch["id"] != cheque_id]
    save_user_data(sender_user_data["id"], sender_user_data)

    recipient = await client.get_entity(user_id)
    recipient_name = recipient.first_name if recipient.last_name is None else f"{recipient.first_name} {recipient.last_name}"
    amount = f'{cheque["amount"]:f}'.rstrip('0').rstrip('.')

    sender_text = f'<a href="tg://user?id={user_id}"><b>{recipient_name}</b></a> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª(–∞) –≤–∞—à —á–µ–∫ –Ω–∞ <b>{amount} {cheque["currency"]} ({cheque["amount"] * get_ton_usd_price() if cheque["currency"] == "TON" else cheque["amount"]:.2f}$)</b>.'
    cheburek = [
        [
            Button.inline('‚Äπ –ö–æ—à–µ–ª—ë–∫', b'wallet_message'),
        ],
    ]
    await client.send_message(sender_user_data["id"], sender_text, buttons=cheburek, parse_mode='html')
    if all_logs:
        print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_user_data['first_name']} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–µ–∫ –Ω–∞ {amount} {cheque['currency']}, ID —á–µ–∫–∞: {cheque['id']}")

    koks = [
        [
            Button.inline('‚Äπ –ù–∞–∑–∞–¥', b'wallet_message'),
        ],
    ]
    recipient_text = (
        f'üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ <b>{amount} '
        f'{cheque["currency"]} ({cheque["amount"] * get_ton_usd_price() if cheque["currency"] == "TON" else cheque["amount"]:.2f}$)</b>.'
    )
    comment = cheque.get('comment', '')
    if comment:
        recipient_text += f"\n\nüí¨ {comment}"

    await event.respond(recipient_text, buttons=koks, parse_mode='html')

@client.on(events.NewMessage(pattern='/add'))
async def add(event):
    user_id = event.sender_id
    message = event.message.message.lower().strip()

    parts = message.split()
    
    if len(parts) != 3:
        await event.respond("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.</b> <i>–ò—Å–ø–æ–ª—å–∑—É–π /add [usdt|ton] [—Å—É–º–º–∞]</i>", parse_mode="html")
        return

    currency = parts[1].upper()
    amount_str = parts[2]

    try:
        amount = float(amount_str)
    except ValueError:
        await event.respond("‚ùå <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>", parse_mode="html")
        return

    if amount.is_integer():
        amount = int(amount)

    if currency not in ['USDT', 'TON']:
        await event.respond("‚ùå <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ USDT –∏ TON</b>", parse_mode="html")
        return

    user_data = load_user_data(user_id)
    if currency == 'USDT':
        user_data['balance_usdt'] += amount
    elif currency == 'TON':
        user_data['balance_ton'] += amount
    save_user_data(user_id, user_data)

    buttons=[
                [
                    Button.inline('‚Äπ –ö–æ—à–µ–ª—ë–∫', b'wallet_message'),
                ],
            ]

    if currency == 'TON':
        amount_in_usd = amount * get_ton_usd_price()
        await event.respond(f"üíµ <b>–í—ã </b><a href='https://tonviewer.com/UQABGo8KCza3ea8DNHMnSWZmbRzW-05332eTdfvW-XDQEmnJ'><b>–≤–Ω–µ—Å–ª–∏</b></a> –Ω–∞ —Å—á—ë—Ç <b>{amount} {currency} ({amount_in_usd:.2f}$) (TON)</b>", buttons=buttons, parse_mode="html", link_preview=False)
        if all_logs:
            print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} {currency}")
    elif currency == 'USDT':
        await event.respond(f"üíµ <b>–í—ã </b><a href='https://tronscan.org/#/token20/TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'><b>–≤–Ω–µ—Å–ª–∏</b></a> –Ω–∞ —Å—á—ë—Ç <b>{amount} {currency} ({amount}$) (TRX-TRC20)</b>", buttons=buttons, parse_mode="html", link_preview=False)
        if all_logs:
            print(f"[log] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['first_name']} (ID: {user_id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} {currency}")

@client.on(events.NewMessage(pattern='/start (.+)'))
async def start_with_cheque(event):
    cheque_id = event.pattern_match.group(1)
    await activate_cheque(event, cheque_id)

@client.on(events.NewMessage(pattern='/admin'))
async def admin(event):
    if event.sender_id == admin_id:
        user_count = len(os.listdir('users'))
        cheque_count = sum(len(load_user_data(user_id)['cheques']) for user_id in [int(f.split('.')[0]) for f in os.listdir('users')])

        uptime = datetime.now() - start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        uptime_parts = []
        if days > 0:
            uptime_parts.append(f"{days} –¥")
        if hours > 0 or days > 0:
            uptime_parts.append(f"{hours} —á")
        if minutes > 0 or hours > 0 or days > 0:
            uptime_parts.append(f"{minutes} –º–∏–Ω")
        uptime_parts.append(f"{seconds} —Å–µ–∫")

        uptime_text = " ".join(uptime_parts)

        text = (f'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n'
                f'üìä <b>–ú–∏–Ω–∏-—Å—Ç–∞—Ç–∞:</b>\n\n'
                f'üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{user_count}</code>\n'
                f'üßæ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <code>{cheque_count}</code>\n\n'
                f'‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞: <code>{uptime_text}</code>\n\n')

        buttons = [Button.inline('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', b'newsletter')]

        await event.respond(text, buttons=buttons, parse_mode="html")

@client.on(events.NewMessage(pattern=f'/user (.+)'))
async def get_user(event):
    if event.sender_id != admin_id:
        return
    
    user_id = int(event.pattern_match.group(1))
    user_data = load_user_data(user_id)

    if user_data:
        user_json = json.dumps(user_data, ensure_ascii=False, indent=4)
        json_path = f'{user_id}.json'
        with open(json_path, 'w', encoding='utf-8') as f:
            f.write(user_json)
        
        description_parts = [
            f'üë§ <b>–ò–Ω—Ñ–∞ –æ–± —é–∑–µ—Ä–µ</b> <code>{user_id}</code>:\n\n'
            f'ü¶ã –ò–º—è: <b><a href="tg://user?id={user_data["id"]}">{user_data["first_name"]}</a></b>' if user_data.get("first_name") else "",
            f'ü¶ã –Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data["username"]}' if user_data.get("username") else "",
            f'üëõ –ë–∞–ª–∞–Ω—Å TON: <code>{format_balance(user_data["balance_ton"])}</code>' if user_data.get("balance_ton") is not None else "",
            f'üí∞ –ë–∞–ª–∞–Ω—Å USDT: <code>{format_balance(user_data["balance_usdt"])}</code>' if user_data.get("balance_usdt") is not None else ""
        ]

        cheque_parts = [f'<code>{cheque["id"]}</code>' for cheque in user_data["cheques"]]
        aloy = ", ".join(cheque_parts)

        description = "\n".join(filter(None, description_parts)) + "\nüßæ –ß–µ–∫–∏:\n" + aloy

        await client.send_file(event.chat_id, json_path, caption=description, parse_mode='html')
        os.remove(json_path)
    else:
        await event.respond('ü§∑‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>', parse_mode='html')

@client.on(events.NewMessage(pattern=f'/cheque (.+)'))
async def get_cheque(event):
    if event.sender_id != admin_id:
        return
    
    cheque_id = event.pattern_match.group(1)
    cheque = None
    owner = None

    for filename in os.listdir('users'):
        user_id = int(filename.split('.')[0])
        user_data = load_user_data(user_id)
        for c in user_data['cheques']:
            if c['id'] == cheque_id:
                cheque = c
                owner = user_data
                break
        if cheque:
            break

    if cheque and owner:
        cheque_json = json.dumps(cheque, ensure_ascii=False, indent=4)
        json_path = f'{cheque_id}.json'
        with open(json_path, 'w', encoding='utf-8') as f:
            f.write(cheque_json)

        description_parts = [
            f'üßæ <b>–ß–µ–∫</b> <code>{cheque["id"]}</code><b>:</b>\n',
            f'üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <b><a href="tg://user?id={owner["id"]}">{owner["first_name"]}</a></b>',
            f'üí≤ –°—É–º–º–∞: <code>{format_balance(cheque["amount"])}</code>',
            f'üí± –í–∞–ª—é—Ç–∞: <code>{cheque["currency"]}</code>',
            f'üê≥ –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: <b><a href="tg://user?id={cheque["tied_to_user"]["id"]}">{cheque["tied_to_user"]["name"]}</a></b>' if cheque.get("tied_to_user") else "",
            f'üí¨ –û–ø–∏—Å–∞–Ω–∏–µ —á–µ–∫–∞: <i>{cheque["comment"]}</i>' if cheque.get("comment") else ""
        ]

        description = "\n".join(filter(None, description_parts))

        await client.send_file(event.chat_id, json_path, caption=description, parse_mode='html')
        os.remove(json_path)
    else:
        await event.respond('ü§∑‚Äç‚ôÇÔ∏è <b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')